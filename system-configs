#!/usr/bin/env bash
#
# The main entry point script to utilise the various commands
#
# Please see https://github.com/qcr/services for full details on how
# things work


#################
### VARIABLES ###
#################


# The name of this script, and the directory where it is located
SCRIPT_NAME="$(basename $(readlink -f $0))"
SCRIPT_DIR="$(dirname $(readlink -f $0))"




#################
### FUNCTIONS ###
#################

function print_usage(){
    printf "\nRuns the QCR System Configs tool.
    
Usage:
    system_configs [-h|--help] [-v|--verbose] <command> <arguments>

Arguments:
    <command>       the command to run.
    <arguments>     the arguments for the command.

Commands:
"
  
    CMDS="$(get_commands)"
    for i in ${CMDS[@]}; do
        printf "    > $i\n"
    done

}

function get_commands(){
    CMDS=($(find "${SCRIPT_DIR}/scripts" -mindepth 1 -maxdepth 1 -executable -type f -not -name '.*' -exec basename {} \;))
    echo "${CMDS[@]}"
}


###################
### MAIN SCRIPT ###
###################

# Set shell options, enter help set in terminal for definitions
set -o pipefail

# Source Common
source ${SCRIPT_DIR}/scripts/common

# Check SSH Agent is running
if [ -z $SSH_AGENT_PID ]; then
    print "${ERROR}The system-configs tool requires an SSH Agent to be running."
    exit 1
fi

# Display heading
display_heading "SYSTEMS CONFIG TOOL"


# Split args into what is parsed here, and what goes to a subcommand
SUB_INDEX=$(printf '%s\n' "$@" | grep -n '^[a-zA-Z]' | head -n 1 | cut -f1 -d: || echo "$(($#+1))")
MAIN_ARGS=( "${@:1:$((SUB_INDEX-1))}")
SUB_ARGS=( "${@:$SUB_INDEX}" )

# Parse arguments
PARSED_ARGS=$(getopt -a -n ${SCRIPT_NAME} -o 'hv' --long 'help,verbose' -- "${MAIN_ARGS[@]}")
eval set -- "${PARSED_ARGS}"
VERBOSE=false
while true; do
    case "$1" in 
        -h|--help) 
        print_usage; exit 0;;
        -v|--verbose) 
        VERBOSE=true; shift ;;
        # -- indicates end of arguments, break while loop
        --) shift; break ;;
        # invalid option was passed, print usage
        *)
        printf "${ERROR}Unrecognized option '$1'\n" 
        print_usage 
        exit 1 ;;    
    esac
done

# Valid number of sub arguments
if [ ${#SUB_ARGS[@]} -eq 0 ]; then
    print_usage
    exit
fi


# Check command argument is valid
VALID_CMDS="$(get_commands)"
CMD=${SUB_ARGS[0]}
if [[ ! " ${VALID_CMDS[*]} " =~ " ${CMD} "  ]]; then
    printf "${ERROR}The command ${YELLOW}${CMD}${RESET} does not exist.\n"
    print_usage
    exit 1
fi

# Get sub-script arguments
ARGS_LIST=${SUB_ARGS[@]:1}

# Print to terminal what is being called
if [ ${VERBOSE} == true ]; then
    if [ ${#ARGS_LIST[@]} == 1 ] && [ "${ARGS_LIST[0]}" == "" ]; then
        printf "${INFO}Calling '${YELLOW}${SCRIPT_DIR}/scripts/${CMD}${RESET}' with no arguments\n\n"
    else
        printf "${INFO}Calling '${YELLOW}${SCRIPT_DIR}/scripts/${CMD}${RESET}' with arguments '${YELLOW}${ARGS[@]:1}${RESET}'\n\n"
    fi
fi

# Run tool as sudo, passing in SSH Authorisation Socket
sudo SSH_AUTH_SOCK="$SSH_AUTH_SOCK" /bin/bash ${SCRIPT_DIR}/scripts/${CMD} ${ARGS_LIST[@]}
