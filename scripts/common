#!/bin/bash
#
#
# Common bash components

################
### DEFAULTS ###
################

# Screen Reset
RESET='\033[0m'

# Screen Colors
BLACK="\033[0;30m"
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
PURPLE="\033[0;35m"
CYAN="\033[0;36m"
WHITE="\033[0;37m"

# Screen helpers
INFO="${GREEN}[INFO]${RESET} "
WARN="${YELLOW}[WARN]${RESET} "
ERROR="${RED}[ERROR]${RESET} "

# DEFAULT PARAMETERS

# The hostname of the system, must conform to: <system_name>-<variation> 
# system_name: must be all lowercase a-z characters
# variation: must be all lowercase a-z characters, or 0-9
HOSTNAME="$(hostname)"   

# Sub component within the system (i.e., a secondary machine supporting the main system)
# For example, a NUC running the RTOS for a Desktop GPU system
SUB_COMP=""
GH_ORG="qcr-configs"
GH_REPO=""
GH_BRANCH="" #Default Branch to use 
GH_PATH=""
GH_TEMPLATE_PATH=""
GH_TEMPLATE_VARIANT="default"

# The path on the machine where the files are stored. These files
# are then symlinked to the required destination on the system
LOCAL_PATH="/opt/qcr"

# Location where original files are stored, for when
# restore is called
TRASH=/var/qcr/removed

TOKEN_PASS=""





#################
### FUNCTIONS ###
#################

function _root_check() {
  if [ "$EUID" -ne 0 ]; then echo "Please re-run with sudo."; exit 1; fi
}

function _get_base_name() {
  IFS='-' read -ra PARTS <<< $1
  echo ${PARTS[0]}
}

function _get_sub_component() {
  IFS='-' read -ra PARTS <<< $1
  SUB_COMP=$(IFS=- ; echo "${PARTS[*]:1}")
  if [ "$SUB_COMP" != "" ]; then
    echo $SUB_COMP
  else
    echo "default"
  fi 
}



function display_heading() {
    # Prints a heading to the screen
    #
    # Usage:
    #   display_heading "<HEADING TEXT>"

    # $1 heading text
    char="-"
    text=" ${1:-} "
    (( left_pad=(80 - ${#text})/2 ))
    (( right_pad=(81 - ${#text})/2 ))
    printf "${GREEN}"
    printf "\n"; printf "%.0s$char" {1..80}; printf "\n"
    printf "%.0s$char" $(seq 1 $left_pad)
    printf "${WHITE}$text${GREEN}"
    printf "%.0s$char" $(seq 1 $right_pad)
    printf "\n"; printf "%.0s$char" {1..80}; printf "\n"
    printf "${RESET}"
}