#!/bin/bash
#
#
# Common bash components

################
### DEFAULTS ###
################

# Screen Reset
RESET='\033[0m'

# Screen Colors
BLACK="\033[0;30m"
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
PURPLE="\033[0;35m"
CYAN="\033[0;36m"
WHITE="\033[0;37m"

# Screen helpers
INFO="${GREEN}[INFO]${RESET} "
WARN="${YELLOW}[WARN]${RESET} "
ERROR="${RED}[ERROR]${RESET} "

# DEFAULT PARAMETERS
 
# Store the hostname as a default parameter,
# can be overwritten via command line arguments
HOSTNAME=$(hostname)

# The system name determined from the machine's hostname,
# and is everything before the first hyphen within the hostname.
SYSTEM_NAME=""

# The name of component within the system, which is simply
# the machine's hostname. Needs to be set in each script,
# rather than here as it is based on the hostname, which
# may be passed in as an argument.
COMPONENT_NAME=""

# Variant, the name of the sub-component variation. For example, if a secondary
# machine could be used to run two different robot arms. Default is default
VARIANT="default"

# Owner of the github repo where things will be synced
# Set by user when first call sync or install command
# or set via passed argument
GH_OWNER=""

# Default branch to use within the repo
GH_DEFAULT_BRANCH="main"

# The path on the machine where the files are stored. These files
# are then symlinked to the required destination on the system
STORE_PATH="/opt/qcr"

# Location where original files are stored, for when
# restore is called
BACK_UP_PATH="/var/qcr/back-up"



#################
### FUNCTIONS ###
#################

function _root_check() {
  if [ "$EUID" -ne 0 ]; then printf "${ERROR}Please re-run with sudo.\n"; exit 1; fi
}

function _get_system_name() {
  IFS='-' read -ra PARTS <<< $1
  echo ${PARTS[0]}
}

function _get_component_name() {
  IFS='-' read -ra PARTS <<< $1
  SUB_COMP=$(IFS=- ; echo "${PARTS[*]:1}")
  if [ "$SUB_COMP" != "" ]; then
    echo $SUB_COMP
  else
    echo "main"
  fi 
}


function _check_local() {
  # Checks to see if a directory is a git repository
  # Returns 1 if local exists, else 0
  if [ -e "$1/.git" ]; then
    echo 1
    return
  fi
  echo 0
}

function _check_remote_using_ssh() {
    # Check remote using SSH
    git ls-remote -q git@github.com:$1 &> /dev/null
    STATUS=$?
    if [ "$STATUS" == "0" ]; then
      echo 1 # exists
    else
      echo 0 # doesn't exist
    fi
}

function _check_remote_using_pat() {
    STATUS=$(curl -I -s \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $GH_TOKEN" \
        https://api.github.com/repos/$1 | head -n 1|cut -d$' ' -f2)
    
    if [ "$STATUS" == "200" ]; then
        echo 1
    else
        echo 0
    fi
}

function _create_remote() {
    # Create remote github repository
    # Arguments: <GH_OWNER> <GH_REPO> <GH_TOKEN>
    curl -s -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $3" \
        -d "{\"name\":\"$2\",\"description\":\"System configuration files for $2\", \"private\": true,\"auto_init\": false, \"has_issues\": true,\"has_projects\": true,\"has_wiki\":true}" \
        "https://api.github.com/orgs/$1/repos"
}

function _create_local() {
  # Arguments: <LOCAL_REPO_PATH> <GH_OWNER> <GH_REPO> <GH_BRANCH>

  # Make directory if doesn't exists
  if [ ! -e $1 ]; then
    mkdir -p $1
  fi

  # Navigate to local repo and init
  pushd $1 >/dev/null
  git init

  # Configure git
  git config init.defaultBranch $4
  git config user.name qcrbot
  git config user.email "qcrbot@qut.edu.au"

  # Create, and commit readme
  echo "# $3" > README.md
  git add README.md
  git commit -m "Initial commit from QCR system-configs tool"
  git branch -M $4
  git remote add origin git@github.com:$2/$3.git
  git push -u origin $4
  popd >/dev/null
}


function _prompt() {
  while true; do
  read -p "$1 (Y/n): " yn
  case $yn in 
	[yY]|"" ) echo 1;
		break;;
	[nN]|"" ) echo 0;
        break;;
	* ) echo invalid response;;
  esac
  done
}


function display_heading() {
    # Prints a heading to the screen
    #
    # Usage:
    #   display_heading "<HEADING TEXT>"

    # $1 heading text
    char="-"
    text=" ${1:-} "
    (( left_pad=(80 - ${#text})/2 ))
    (( right_pad=(81 - ${#text})/2 ))
    printf "${GREEN}"
    printf "\n"; printf "%.0s$char" {1..80}; printf "\n"
    printf "%.0s$char" $(seq 1 $left_pad)
    printf "${WHITE}$text${GREEN}"
    printf "%.0s$char" $(seq 1 $right_pad)
    printf "\n"; printf "%.0s$char" {1..80}; printf "\n"
    printf "${RESET}"
}