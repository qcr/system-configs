#!/usr/bin/env bash
#
# Manages syncing between remote and local copies of the system-configs
# tracking a new system configuration file
#
# For more details, see https://docs.qcr.ai/reference/resources/config_tracking_tool/


### IMPORTANT ###
# This file must be run as sudo

#################
### VARIABLES ###
#################


# The name of this script, and the directory where it is located
SCRIPT_NAME="$(basename $(readlink -f $0))"
SCRIPT_DIR="$(dirname $(readlink -f $0))"

# User config directory and files
UC_DIR=$(dirname ${SCRIPT_DIR})/.user_config
DEFAULTS_FILE=${UC_DIR}/defaults
ENC_TOKEN_FILE=${UC_DIR}/enc_token

# Variables
PULL=1
GH_TOKEN=""
GH_REPO=""
GH_PATH=""
GH_BRANCH=""

#################
### FUNCTIONS ###
#################

function print_usage(){
    printf "\nSyncs a set of tracked files with a remote repository.
    
Usage:
    system_configs sync <email> [-h|--help] [-o|--owner <owner>] [-p|--pat <pat>] [-t|--template <name>]

Arguments:
    sync          <email>   the user's GitHub email perform the sync.
    -h|--help               prints this help menu.
    -o|--owner    <owner>   the GitHub owner where the remote should exist, or be created. Set a default using the 'system-configs config' command.
    -p|--pat      <pat>     a GitHub personal access token (PAT) that can create repos for the given owner. Set a default using the 'system-configs config' command.
    -t|--template <name>    the name to give to the template, which will be prepended with 'template-'.

"

}

function _check_required_variables() {
  # Check GH_EMAIL is set
  if [ -z $GH_EMAIL ]; then
    printf "${ERROR}You must supply your GitHub user email to sync files.\n"
    exit 1
  fi

  # Check GH_OWNER is set
  if [ "${GH_OWNER}" == "" ]; then
    if [ -z ${UC_GH_OWNER} ]; then
      printf "${ERROR}You must set the default GitHub User via 'system-configs config --owner <user>' or by providing it using the '--owner' argument.\n"
      exit 1
    fi
    GH_OWNER=${UC_GH_OWNER}
  fi

  # Check TOKEN is set
  if [ "${GH_TOKEN}" == "" ]; then
    if [ -e ${ENC_TOKEN_FILE} ]; then
      # Decrypt token
      GH_TOKEN=$(gpg --decrypt ${ENC_TOKEN_FILE})
    fi
  fi

  # Check GH_BRANCH is set
  if [ "$GH_BRANCH" == "" ]; then
    GH_BRANCH=$GH_DEFAULT_BRANCH
  fi
}


###################
### MAIN SCRIPT ###
###################

# Source common
source ${SCRIPT_DIR}/common

# Root User Check
# Will exit if isn't running as root user 
_root_check

# Source user config
if [ -e ${DEFAULTS_FILE} ]; then
  source ${DEFAULTS_FILE}
fi

# Parse Arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help) 
      print_usage
      exit 0;;
    -H|--host|--hostname)
      HOSTNAME="$2"
      shift 2
      ;;
    -b|--branch)
      GH_BRANCH="$2"
      shift 2
      ;;
    -sp|--store-path)
      STORE_PATH="$2"
      shift 2
      ;;
    -c|--create-remote)
      CREATE_REMOTE=0
      shift
      ;;
    -o|--owner)
      GH_OWNER="$2"
      shift 2
      ;;
    -np|--no-pull)
      PULL=1
      shift
      ;;
    -p|--pat)
      GH_TOKEN="$2"
      shift 2
      ;;
    -t|--template)
      TEMPLATE="$2"
      shift 2
      ;;
    *)
      if [ -z "$GH_EMAIL" ]; then
        GH_EMAIL="$1"
        shift
      else
        echo "Invalid argument: \"$1\""
        exit 1
      fi
  esac
done


# Make sure top level directories exist
mkdir -p $STORE_PATH
mkdir -p $BACK_UP_PATH
# and have correct ownership
# _create_directory_and_set_ownership $STORE_PATH
# _create_directory_and_set_ownership $BACK_UP_PATH

# Check required variables are set
# Either from command line or user config
_check_required_variables

# Set repo name
HOSTNAME=$(_get_base_name $HOSTNAME)
if [ -z $TEMPLATE ]; then
  GH_REPO="system-configs-$HOSTNAME"
else
  GH_REPO="template-$TEMPLATE"
fi


# Set github path and local repo root path (root)
GH_PATH="$GH_OWNER/$GH_REPO"
LOCAL_ROOT=$STORE_PATH/$GH_REPO

# Make sure local root exists
mkdir -p $LOCAL_ROOT

# Print information to user
printf "\n${INFO}Hostname: $HOSTNAME\n"
printf "${INFO}GitHub Email: $GH_EMAIL\n"
printf "${INFO}GitHub Owner: $GH_OWNER\n"
printf "${INFO}GitHub Repo: $GH_REPO\n"
printf "${INFO}GitHub Branch: $GH_BRANCH\n"
printf "${INFO}Local Repo Path: $LOCAL_ROOT\n"
printf "${INFO}Remote Repository: https://github.com/$GH_PATH\n\n"

# Create remote if it doesn't exist
if [ "$(_check_remote_using_ssh $GH_PATH)" == "0" ]; then
  # Check if a PAT Token is available
  if [ "${GH_TOKEN}" == "" ]; then
    printf "${ERROR}The remote ${YELLOW}https://github.com/${GH_PATH}${RESET} and must be created.\nYou can either manually create an empty remote repo, or it can be created via this tool.\nTo be created by this tool you must provide a GitHub Personal Access Token (PAT) either by:\n    - setting the default PAT 'system-configs config --pat <PAT>';\n    - or by providing it using the '--pat <PAT>' argument.\n"
    exit 1
  fi

  # Attempt to create remote
  if [ "$CREATE_REMOTE" == "1" ] || [ "$(_prompt 'Remote does not exist. Create it?')" == "1" ]; then
      printf "${INFO}Attempting to create remote...\n"
      printf "\t- Owner: ${GH_OWNER}\n"
      printf "\t- Repo: ${GH_REPO}\n"
      _create_remote $GH_OWNER $GH_REPO $GH_TOKEN
  else
      printf "${INFO}Unable to continue, nothing to do...\n"
      exit 0
  fi
fi

# Create/init local repo if required
if [ "$(_check_local $LOCAL_ROOT)" == "0" ]; then
    printf "\n${INFO}Initialising local repo...\n"
    _create_local $LOCAL_ROOT $GH_OWNER $GH_REPO $GH_DEFAULT_BRANCH
fi

# Pull down latest
if [ "$PULL" == "1" ]; then
    # TODO: Deal with local changes, merge conflicts, etc.
    printf "\n${INFO}Pulling from remote...\n"
    git pull
    # TODO: pulling down new files doesn't install them
fi


# Update template using system configuration
if [ ! -z $TEMPLATE ]; then

  # Get configuration files
  CONFIG_ROOT=$STORE_PATH/"system-configs-$HOSTNAME"
  FILES=$(find ${CONFIG_ROOT} -type f -not -path "*.git*" -not -name "README.md")

  # Add any missing files to template
  printf "\n${INFO}Adding files to template...\n"
  DIFF_FILES=()
  for f in ${FILES[@]}; do
    # Get file path without CONFIG_ROOT
    f="${f//$CONFIG_ROOT}"

    # See if already exists in template
    if [ ! -e ${LOCAL_ROOT}/$f ]; then
      printf "\t-$f\n"
      mkdir -p $(dirname $LOCAL_ROOT/$f)
      rsync $CONFIG_ROOT/$f $LOCAL_ROOT/$f
    elif ! cmp -s "$CONFIG_ROOT/$f" "$LOCAL_ROOT/$f"; then
      DIFF_FILES+=("$f")
    fi
  done
  echo ""

  # Report any differences if files already exist
  if [[ ${#DIFF_FILES} -gt 0 ]]; then
    printf "${WARN}Differences between the system configuration and template were found in...\n"
    for f in ${DIFF_FILES[@]}; do
      printf "\t- Difference in $f\n"
    done
    printf "${WARN}You will need to manually update the template files to create the required changes.\n"
  else
    printf "${INFO}No differences found between the system configuration and the template\n"
  fi
fi

# Navigate to local repo, set user email
# GitHub uses user email to show committer not GitHub username
pushd $LOCAL_ROOT >/dev/null
git config user.email $GH_EMAIL

# Move to desired branch
printf "\n${INFO}Checking out branch ${GH_BRANCH}...\n"
git checkout $GH_BRANCH 2>/dev/null
if [ "$?" != "0" ]; then
    git branch $GH_BRANCH
    git checkout $GH_BRANCH
fi

# Add and commit
printf "\n${INFO}Adding and committing files...\n"
git add .
git commit -m 'Commit made by QCR system-config tools'

# Check if remote branch exists, and push to branch
printf "\n${INFO}Pushing local to remote...\n"
EXISTS=$(git branch -l -a | grep "remotes/origin/$GH_BRANCH")
if [ "$EXISTS" == "" ]; then
    git push --set-upstream origin $GH_BRANCH
else
    git push
fi

# Move back to original directory
popd

