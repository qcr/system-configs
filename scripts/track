#!/usr/bin/env bash
#
# Allows tracking a new system configuration file or directory
#
# To start tracking a new system file:
#     qcr system_configs track file|directory
#
# For more details, see https://docs.qcr.ai/reference/resources/config_tracking_tool/


#################
### VARIABLES ###
#################

# The name of this script, and the directory where it is located
SCRIPT_NAME="$(basename $(readlink -f $0))"
SCRIPT_DIR="$(dirname $(readlink -f $0))"

# Variables
TARGET_FILES=() # List of target files
RECURSIVE=0     # set to 1 if recursively adding files in a directory
RESTORE=0       # set to 1 if restoring targets
DELETE=0        # set to 1 if deleting targets


#################
### FUNCTIONS ###
#################

# TODO. Document arguments and their meaning:
#   -hostname - specify the machine hostname
#   -sub-comp - specify the sub-component within the system
#   -local-path - path where files are to be stored
#   -delete - 
#   -recursive - recursively adds files from a directory (what is the difference between this and simply tracking entire directory?)
#   -restore 


function print_usage(){
    printf "\nTracks a file.
    
Usage:
    system_configs [-h|--help] track <files>

Arguments:
    <files>      the files to track

"

}

function _track() {
  FILES=("$@")
  
  # Loop through files
  for TARGET_FILE in "${FILES[@]}"; do
    printf "\n${INFO}Attempting to track: '${YELLOW}${TARGET_FILE}${RESET}'\n"

    # Check if target file is already a symlink
    # If target file is a symlink, can continue if restore or delete is 1
    if [ -L "$TARGET_FILE" ] && [ "$RESTORE" == "0" ] && [ "${DELETE}" == "0" ]; then
      printf "${WARNING}Ignoring file '${YELLOW}${TARGET_FILE}${RESET}' as it already appears to be a symlink.\n"
      continue;
    fi
    
    # Attempting to track a directory
    if [ -d "$TARGET_FILE" ] && [ "$RECURSIVE" == "1" ]; then
      printf "  - Expanding directory $TARGET_FILE...\n"
      
      ftype='f'
      if [ "$RESTORE" != "0" ]; then
        ftype="l"
      fi

      CONTENT=()
      while IFS=  read -r -d $'\0'; do
          CONTENT+=("$REPLY")
      done < <(find $TARGET_FILE -type $ftype -print0)
      
      _track "${CONTENT[@]}"
      continue
    fi

    # Destination is where the symlinked file will be located
    # actual file will live at $SRC_PATH/$destination
    target="$(realpath -s "$TARGET_FILE")"
    destination=$target

    if [ -d "$target" ]; then
      target="$target/"
    fi
    
    printf "  - Moving: $target\n"
    
    postfix=""
    if [ "$DELETE" == "1" ]; then
        postfix=".delete"
    fi

    # Add requested config
    if [ "$RESTORE" == "0" ]; then
        # Make source location
        mkdir -p "$(dirname "$SRC_PATH$target")"

        # Check existence of target
        if [ -e "$target" ]; then
            # Move target to source location
            rsync -r -a  "$target" "$SRC_PATH$destination$postfix"

            # Put original file in a back-up location
            mkdir -p $(dirname "$BACK_UP_PATH/$destination")
            rsync -r -a -p --remove-source-files "$target" "$BACK_UP_PATH/$destination"
            
            # Remove target
            rm -rf $target
            
            printf "  - Moved: $target to $SRC_PATH$destination$postfix\n"
        else
            # Create file
            touch "$SRC_PATH$destination"
        fi

        # If delete is not set
        if [ "$DELETE" == "0" ]; then
            # Create symlink and change ownership
            ln -s "$SRC_PATH$target" "$destination"
            # chown -h --reference "$SRC_PATH$destination" "$destination"
            printf "  - Symlinked: $SRC_PATH$destination to $destination\n"
        fi
    else
      # Restore the file from the back-up location
        if [ -e "$BACK_UP_PATH$target" ]; then
            rm -rf $destination
            
            mkdir -p "$(dirname $destination)"
            
            rsync -r -a -p --remove-source-files "$BACK_UP_PATH$target" "$destination"
            # rm -rf $SRC_PATH$target
            # rm -rf $BACK_UP_PATH$target

            printf "  - Restored $BACK_UP_PATH$target to $destination\n"
        fi
    fi

  done
}

###################
### MAIN SCRIPT ###
###################

# Set shell options, enter help set in terminal for definitions
set -euo pipefail

# Source common
source ${SCRIPT_DIR}/common

# Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help) 
      print_usage
      exit 0;;
    -H|--host|--hostname)
      HOSTNAME="$2"
      shift 2
      ;;
    -s|--sub-component)
      SUB_COMP="$2"
      shift 2
      ;;
    -sp|-l|--store-path)
      STORE_PATH="$2"
      shift 2
      ;;
    -d|--delete)
      DELETE=1
      shift
      ;;
    -r|--recursive)
      RECURSIVE=1
      shift
      ;;
    -rs|--restore)
      RESTORE=1
      shift
      ;;
    *)
      TARGET_FILES+=("$1")
      shift
      ;;
  esac
done

# Make sure top level directories exist
# and have correct ownership
_create_directory_and_set_ownership $STORE_PATH
_create_directory_and_set_ownership $BACK_UP_PATH

# Get sub-component, which according to OUT001 (Naming Conventions), is everything after the first hyphen
if [ "$SUB_COMP" == "" ]; then
  SUB_COMP=$(_get_sub_component $HOSTNAME)
fi

# Set repo name, based on the hostname, which according to OUT001 (Naming Conventions), is everything prior to the first hyphen
HOSTNAME=$(_get_base_name $HOSTNAME)
GH_REPO="system-configs-$HOSTNAME"

# Create source path where files are to be stored and symlinked from
SRC_PATH=$STORE_PATH/$GH_REPO/$SUB_COMP/
mkdir -p $SRC_PATH

# Error checking, need at least one file
if [ ${#TARGET_FILES[@]} -eq 0 ]; then
  printf "${ERROR}Please provide path to a file or directory.\n"
  exit 1;
fi

# Print info
printf "\n${INFO}Hostname: ${HOSTNAME}\n"
printf "${INFO}Sub-Component: $SUB_COMP\n"
printf "${INFO}Source Path: $SRC_PATH\n"

# Display heading
display_heading "Tracking Files"

# Track files - written as function for recursive capability
_track "${TARGET_FILES[@]}"