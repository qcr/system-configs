#!/bin/bash
#
#
# Installs all system configuration files for a given hostname
# 
# To install all saved system configuration files:
#     qcr system_configs install
#
# For more details, see https://docs.qcr.ai/reference/resources/config_tracking_tool/

TOKEN=$(cat <<EOF
-----BEGIN PGP MESSAGE-----

jA0ECQMC3dcjUYabUyD/0l4BYKDynWFMV507QwSkXcDTzVZ9wu436o4s8iLFnamg
c+cJaZU0Yn29aLKestHAjsjJMZfCbXeykrVJ2pk6CAy7fCwBzsPf9Ukd+QBdRnZO
haXQ+AldWkekERAacZer
=evG6
-----END PGP MESSAGE-----
EOF
)

function _root_check() {
  if [ "$EUID" -ne 0 ]; then echo "Please re-run with sudo."; exit 1; fi
}

function _prompt() {
  while true; do
  read -p "$1 (Y/n): " yn
  case $yn in 
	[yY]|"" ) echo 1;
		break;;
	[nN]|"" ) echo 0;
        break;;
	* ) echo invalid response;;
  esac
  done
}

function _check_local() {
  if [ ! -e "$1/.git" ]; then
    echo 1
    return
  fi
  echo 0
}

function _get_oauth_token() {
  pass=$1
  if [ "$pass" == "" ]; then
    read -s -p "GitHub Token Password: " pass
  fi
  
  echo "$TOKEN" | gpg --batch --yes --armor --decrypt --passphrase $pass 2>/dev/null
  RESULT=$?
  
  if [ "$RESULT" != "0" ]; then
    return 1
  fi
}

function _check_remote() {
    STATUS=$(curl -I -s \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $GH_TOKEN" \
        https://api.github.com/repos/$1 | head -n 1|cut -d$' ' -f2)
    
    if [ "$STATUS" == "200" ]; then
        echo 1
    else
        echo 0
    fi
}

function _create_remote() {
    curl -s -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $GH_TOKEN" \
        -d "{\"name\":\"$2\",\"description\":\"System configuration files for $2\", \"private\": true,\"auto_init\": true, \"has_issues\": true,\"has_projects\": true,\"has_wiki\":true}" \
        "https://api.github.com/orgs/$1/repos"       
}

function _get_remote() {
    echo "Cloning https://github.com/$1"
    git clone https://oauth2:$GH_TOKEN@github.com/$1 $2

    pushd $2
    if [ -e '.gitmodules' ]; then
      _update_submodules
      git submodule update --init --recursive
    fi
    popd
}

function _get_variant() {
  IFS='-' read -ra PARTS <<< $1
  VARIANT=$(IFS=- ; echo "${PARTS[*]:1}")
  if [ "$VARIANT" != "" ]; then
    echo $VARIANT
  else
    echo "default"
  fi 
}

function _get_base_name() {
  IFS='-' read -ra PARTS <<< $1
  echo ${PARTS[0]}
}

function _get_remote_org() {
  IFS='/' read -ra PARTS <<< $1
  echo ${PARTS[0]}
}

function _get_repo_name() {
  IFS='/' read -ra PARTS <<< $1
  echo ${PARTS[1]}
}

function _update_submodules() {
  if [ -e ".gitmodules" ]; then
    sed -i "s/GH_TOKEN/$GH_TOKEN/g" .gitmodules
  fi
}

# Default Parameters
HOSTNAME="$(hostname)"   #system Hostname
VARIANT=""    #Hardware Variant to be used
GH_ORG="qcr-configs"
GH_REPO=""
GH_BRANCH="" #Default Branch to use 
GH_PATH=""
GH_TEMPLATE_PATH=""
GH_TEMPLATE_VARIANT="default"
LOCAL_PATH="/opt/qcr"       #Alternative <Hostname>_system_configs file location if repo not accessible
NO_REMOTE=0
CREATE_REMOTE=0
TOKEN_PASS=""
RUN_INSTALL=1    #Flag to run default install script from configs

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--host|--hostname)
      HOSTNAME="$2"
      shift
      shift
      ;;
    -hw|--hadware-variant)
      VARIANT="$2"
      shift
      shift
      ;;
    -t|--template)
      GH_TEMPLATE_PATH="$2"
      shift
      shift
      ;;
    -thw|--template-variant)
      GH_TEMPLATE_VARIANT="$2"
      shift
      shift
      ;;
    -b|--branch)
      GH_BRANCH="$2"
      shift
      shift
      ;;
    -lp|-l|--local-path)
      LOCAL_PATH="$2"
      shift
      shift
      ;;
    -ni|--no-install)
       RUN_INSTALL=0
       shift
       ;;
    -c|--create-remote)
      CREATE_REMOTE=1
      shift
      ;;
    -o|--owner)
      GH_ORG="$2"
      shift
      shift
      ;;
    --pass)
      TOKEN_PASS="$2"
      shift
      shift
      ;;
    -ng|--no-remote)
      NO_REMOTE=1
      shift
      ;;
    *)
      echo "Invalid argument: \"$1\""
      exit 1
  esac
done

_root_check

if [ "$NO_REMOTE" == "0" ]; then
  GH_TOKEN=$(_get_oauth_token $TOKEN_PASS)

  if [ "$?" == "1" ]; then
    echo 'Invalid token password';
    exit 1
  fi
fi

if [ "$VARIANT" == "" ]; then
  VARIANT=$(_get_variant $HOSTNAME)
fi

HOSTNAME=$(_get_base_name $HOSTNAME)
GH_REPO="system-configs-$HOSTNAME"

GH_PATH="$GH_ORG/$GH_REPO"
_USE_TEMPLATE=0

if [ "$GH_TEMPLATE_PATH" != "" ] && [ "$GH_TEMPLATE_PATH" != "$_GH_PATH" ]; then
  _GH_TEMPLATE_ORG=$(_get_remote_org $GH_TEMPLATE_PATH)
  _GH_TEMPLATE_REPO=$(_get_repo_name $GH_TEMPLATE_PATH)
  _USE_TEMPLATE=1
fi

ROOT=$LOCAL_PATH/$GH_REPO/$VARIANT/

echo "Hostname: $(hostname)"
echo "Local Machine Base": $HOSTNAME
echo "Machine Variant: $VARIANT"
echo "Configuration Path: $ROOT"

if [ "$NO_REMOTE" == "0" ]; then
  echo "Machine Repository: https://github.com/$GH_PATH"

  if [ "$_USE_TEMPLATE" == "1" ]; then
    echo "Template Repository: https://github.com/$GH_TEMPLATE_PATH"
  fi

  echo -n "Branch: "
  if [ "$GH_BRANCH" != "" ]; then
    echo $GH_BRANCH
  else
    echo "default"
  fi
fi

echo -n "Installing: "
if [ "$RUN_INSTALL" == "1" ]; then
  echo "yes"
else
  echo "no"
fi

echo "-------------------------------------------"
if [ "$NO_REMOTE" == "0" ]; then
  if [ "$(_check_remote $GH_PATH)" == "0" ]; then
    if [ "$CREATE_REMOTE" == "1" ] || [ "$(_prompt 'Remote does not exist. Create it?')" == "1" ]; then
      echo 'Creating remote...'
      _create_remote $GH_ORG $GH_REPO
    else
      echo 'Unable to continue, nothing to do...'
      exit 0
    fi
  fi

  if [ "$(_check_local $LOCAL_PATH/$GH_REPO)" == "1" ]; then
    _get_remote $GH_PATH $LOCAL_PATH/$GH_REPO
    git config --system --add safe.directory $LOCAL_PATH/$GH_REPO

    if [ "$GH_BRANCH" != "" ]; then
      pushd $LOCAL_PATH/$GH_REPO
      git checkout $GH_BRANCH
      popd
    fi
  fi
fi


mkdir -p $ROOT

if [ "$_USE_TEMPLATE" == "1" ]; then
  echo "Fetching template..."
  _get_remote $GH_TEMPLATE_PATH /tmp/$_GH_TEMPLATE_REPO
  rsync -r --progress --exclude '.git' --remove-source-files /tmp/$_GH_TEMPLATE_REPO/$GH_TEMPLATE_VARIANT/* $ROOT
  rm -rf /tmp/$_GH_TEMPLATE_REPO
fi

if [ "$RUN_INSTALL" == "1" ]; then
    echo 'Installing files...'


    TRASH=/var/qcr/removed

    # Loop through all found configs, adding them iteratively
    pushd $ROOT >/dev/null

    CONTENT=()

    # files to be installed (excluding files inside git submodules)
    while IFS=  read -r -d $'\0'; do
      CONTENT+=("$REPLY")
    done < <(find . \( -type d \( -exec [ -f {}/.git ] \;  \) -prune \) -o \( -type f -not -path "./install/*" \) -print0)

    # git submodules to be installed
    while IFS=  read -r -d $'\0'; do
      CONTENT+=("$REPLY")
    done < <(find . \( -type d \( -exec [ -f {}/.git ] \;  \) \) -print0)

    for c in "${CONTENT[@]}"; do
      target="/$(realpath --relative-to="$ROOT" "$c")"
      
      destination=$target

      if [ -d "$target" ]; then
        target="$target/"
      fi

      if [[ -L "$target" ]] && [ "$(readlink -f $target)" == "$(realpath $c)" ]; then
          echo "Skipping $(realpath $c)"
          continue
      fi
      
      if [[ $c == *.delete ]]; then
          target="${target:0:-7}"
          if [ -f "$target" ]; then
            echo "Removing $destination..."
            mkdir -p "$TRASH/$destination"
            rsync --remove-source-files "$target" "$TRASH/$destination"
            echo -e "\tMoved $target to $TRASH/$destination"
          else
            echo "Skipping $(realpath $c)"
          fi
          continue
      fi

      echo "Installing $c to $target..."

      if [ -f "$target" ]; then
          mkdir -p "$TRASH/$(dirname $target)"
          rsync --remove-source-files "$target" "$TRASH/$(dirname $target)"
          echo -e "\tMoved $target to $TRASH/$(dirname $target)"
      fi

      if [ -f "$c" ]; then
        mkdir -p $(dirname $target)
      fi

      ln -s "$(realpath $c)" "$target"
      echo -e "\tSymlinked $target to $c"
    done
    popd >/dev/null
    echo "Finished installing all configs."

    echo "-------------------------------------------"



  if [ -d "${ROOT}install" ] && [ "$(ls -A ${ROOT}install)" ]; then
    echo 'Running Installation Scripts...'
    SCRIPTS=$(find "${ROOT}install" -type f)
    for SCRIPT in $SCRIPTS; do
        if [ -x $SCRIPT ]; then
            bash $SCRIPT
        fi
    done
  else
    echo "No install script found at path: $ROOTinstall"
  fi
fi
